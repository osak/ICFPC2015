#! /usr/bin/python
from argparse import ArgumentParser
import json
from src.python.runner import run
from multiprocessing import Pool
from src.python.phrases import known_phrases

def mapper(args):
    return run(*args)


def binary_selector(config):
    if config['width'] <= 64 and config['height'] <= 64:
        # bitboard optimized binary.
        return './solution_small.exe'
    else:
        # general binary.
        return './solution.exe'


def main():
    parser = ArgumentParser()
    parser.add_argument('-f', metavar='json', action='append', type=file)
    parser.add_argument('-t', metavar='timelimit', type=int)
    parser.add_argument('-m', metavar='memorylimit', type=int)
    parser.add_argument('-c', metavar='cores', type=int, default=1)
    parser.add_argument('-p', metavar='phrase', action='append', type=str)
    args = parser.parse_args()

    if not args.p:
        args.p = known_phrases
    if not args.t:
        args.t = 3600

    pool = Pool(args.c)
    queries = []
    for conffile in args.f:
        config = json.load(conffile)
        for seed in config['sourceSeeds']:
            queries.append((binary_selector(config), config, seed, args.p, args.t))

    result = pool.map(mapper, queries)
    print json.dumps(result)


if __name__ == '__main__':
    main()
